[comment encoding = UTF-8 /]
[module main('http://www.eclipse.org/uml2/4.0.0/UML')/]
[import SE_Generator::xml::GenerateXML/]
[import SE_Generator::model::GenerateModel/]
[import SE_Generator::basics::GenerateBasics/]
[import SE_Generator::screenView::GenerateScreenView/]

[template public mainClass(aClass : Class)]
	
	[comment @main /]
[for (s:Stereotype | aClass.getAppliedStereotypes())]

	[if s.name.equalsIgnoreCase('appStart')]
			[generateMainActivityWithMenuJava(aClass, s)/]
			[aClass.generateXML(aClass, s)/]
			[aClass.generateBasics(aClass, s)/]
			[aClass.generateModel(aClass, s)/]
	[/if]

	[if s.name.equalsIgnoreCase('mapListSwitcherView')]
			[aClass.generateScreenView(aClass, s)/]
 			[aClass.generateModel(aClass, s)/]
	[/if]

	[if s.name.equalsIgnoreCase('photoGalleryView')]
			[aClass.generateScreenView(aClass, s)/]
			[aClass.generateModel(aClass, s)/]
	[/if]

	[if s.name.equalsIgnoreCase('webpageView')]
			[aClass.generateScreenView(aClass, s)/]
	[/if]

	[if s.name.equalsIgnoreCase('customScreen')]
			[aClass.generateScreenView(aClass, s)/]
	[/if]
	
[/for]

[/template]

[query public isSpecificMenu(aClass : Class, s : Stereotype, str : String): Boolean = aClass.getValue(s, 'menuType').oclAsType(EnumerationLiteral).name.equalsIgnoreCase(str)/]

[template public generateMainActivityWithMenuJava(aClass : Class, s : Stereotype)]

	[file (('src/com/ldag/se_application/').concat((aClass.name).concat('.java')), false)]
package com.ldag.se_application;

import java.util.ArrayList;

import com.ldag.se_application.R;

import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;

[if (isSpecificMenu(aClass, s, 'SliderMenu'))]
import com.ldag.se_application.model.MenuEntry;
import com.ldag.se_application.adapter.MenuEntryAdapter;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.widget.DrawerLayout;
[/if]

[for (p : Property | aClass.ownedAttribute)]
import com.ldag.se_application.fragments.[p.name.toUpperFirst().concat('Fragment;')/]
[/for]        

[if (isSpecificMenu(aClass, s, 'TabMenu'))]
 	// tab menu items are not availavle in this version of the generator	
[/if]

public class [aClass.name/] extends Activity {

	[if (isSpecificMenu(aClass, s, 'SliderMenu'))]	
    private DrawerLayout mDrawerLayout;
    private ListView mDrawerList;
    private ActionBarDrawerToggle mDrawerToggle;
 
    // nav drawer title
    private CharSequence mDrawerTitle;

    private ArrayList<MenuEntry> navDrawerItems;
    private MenuEntryAdapter adapter;

	[/if] 
    // used to store app title
    private CharSequence mTitle;
 
    // slide menu items
    private ArrayList<String> navMenuTitles;
    private TypedArray navMenuIcons;
 
 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
 
		[if (isSpecificMenu(aClass, s, 'SliderMenu'))]
 		        mTitle = mDrawerTitle = getTitle();
 
        // load slide menu items
        //navMenuTitles = getResources().getStringArray(R.array.nav_drawer_items);
 
        // nav drawer icons from resources
        navMenuIcons = getResources()
                .obtainTypedArray(R.array.nav_drawer_icons);
 
        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerList = (ListView) findViewById(R.id.list_slidermenu);
 
        navDrawerItems = new ArrayList<MenuEntry>();
 	    navMenuTitles = new ArrayList<String>();
 
 		[for (p : Property | aClass.ownedAttribute)]
				[for (s:Stereotype | p.type.getAppliedStereotypes())]
					[if (s.name.equalsIgnoreCase('CustomScreen'))]
		navDrawerItems.add(new MenuEntry("[p.name.toUpperFirst()/]", navMenuIcons.getResourceId(5, -1)));
					navMenuTitles.add("[p.name.toUpperFirst()/]");
					[/if]
					[if (s.name.equalsIgnoreCase('MapListSwitcherView'))]
		navDrawerItems.add(new MenuEntry("[p.name.toUpperFirst()/]", navMenuIcons.getResourceId(1, -1)));
					navMenuTitles.add("[p.name.toUpperFirst()/]");
					[/if]
					[if (s.name.equalsIgnoreCase('PhotoGalleryView'))]
		navDrawerItems.add(new MenuEntry("[p.name.toUpperFirst()/]", navMenuIcons.getResourceId(3, -1)));
					navMenuTitles.add("[p.name.toUpperFirst()/]");
					[/if]
					[if (s.name.equalsIgnoreCase('WebpageView'))]
		navDrawerItems.add(new MenuEntry("[p.name.toUpperFirst()/]", navMenuIcons.getResourceId(2, -1)));
					navMenuTitles.add("[p.name.toUpperFirst()/]");
					[/if]
				[/for]
		[/for]
       
        // Recycle the typed array
        navMenuIcons.recycle();
 
        mDrawerList.setOnItemClickListener(new SlideMenuClickListener());
 
        // setting the nav drawer list adapter
        adapter = new MenuEntryAdapter(getApplicationContext(),
                navDrawerItems);
        mDrawerList.setAdapter(adapter);
 
        // enabling action bar app icon and behaving it as toggle button
        getActionBar().setDisplayHomeAsUpEnabled(true);
        getActionBar().setHomeButtonEnabled(true);
 
        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
                R.drawable.ic_drawer, //nav menu toggle icon
                R.string.app_name, // nav drawer open - description for accessibility
                R.string.app_name // nav drawer close - description for accessibility
        ) {
            public void onDrawerClosed(View view) {
                getActionBar().setTitle(mTitle);
                // calling onPrepareOptionsMenu() to show action bar icons
                invalidateOptionsMenu();
            }
 
            public void onDrawerOpened(View drawerView) {
                getActionBar().setTitle(mDrawerTitle);
                // calling onPrepareOptionsMenu() to hide action bar icons
                invalidateOptionsMenu();
            }
        };
        mDrawerLayout.setDrawerListener(mDrawerToggle);
 
        if (savedInstanceState == null) {
            // on first time display view for first nav item
            displayView(0);
        }

		[/if]
    }
 		[if (isSpecificMenu(aClass, s, 'SliderMenu'))]

    /**
     * Slide menu item click listener
     * */
    private class SlideMenuClickListener implements
            ListView.OnItemClickListener {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position,
                long id) {
            // display view for selected nav drawer item
            displayView(position);
        }
    }
 		[/if]

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
 
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // toggle nav drawer on selecting action bar app icon/title
		[if (isSpecificMenu(aClass, s, 'SliderMenu'))]
   		if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }
		[/if]

        // Handle action bar actions click
        switch (item.getItemId()) {
        //case R.id.action_settings:
          //  return true;
        default:
            return super.onOptionsItemSelected(item);
        }
    }
 
    /***
     * Called when invalidateOptionsMenu() is triggered
     */
    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        // if nav drawer is opened, hide the action items
		[if (isSpecificMenu(aClass, s, 'SliderMenu'))]
		//boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
        //menu.findItem(R.id.action_settings).setVisible(!drawerOpen);
		[/if]
        return super.onPrepareOptionsMenu(menu);
    }
    
 
    /**
     * Diplaying fragment view for selected nav drawer list item
     * */
    private void displayView(int position) {
        // update the main content by replacing fragments

		MenuEntry me = navDrawerItems.get(position);
    	   	
    
        Fragment fragment = null;

		[for (p : Property | aClass.ownedAttribute)]
		if(me.getTitle().equalsIgnoreCase("[p.name.toUpperFirst()/]")){
			fragment = new [p.name.toUpperFirst().concat('Fragment();')/]
		}
		[/for]
 
        if (fragment != null) {
            FragmentManager fragmentManager = getFragmentManager();
            fragmentManager.beginTransaction()
                    .replace(R.id.frame_container, fragment).commit();
 
		[if (isSpecificMenu(aClass, s, 'SliderMenu'))]
            // update selected item and title, then close the drawer
            mDrawerList.setItemChecked(position, true);
            mDrawerList.setSelection(position);
            mDrawerLayout.closeDrawer(mDrawerList);
		[/if]
			setTitle(navMenuTitles.get(position));
        } else {
            // error in creating fragment
            Log.e("MainActivity", "Error in creating fragment");
        }
    }
 
    @Override
    public void setTitle(CharSequence title) {
        mTitle = title;
        getActionBar().setTitle(mTitle);
    }
 
    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        // Sync the toggle state after onRestoreInstanceState has occurred.
		[if (isSpecificMenu(aClass, s, 'SliderMenu'))]
   		 mDrawerToggle.syncState();
		[/if]
    }
 
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        // Pass any configuration change to the drawer toggls
		[if (isSpecificMenu(aClass, s, 'SliderMenu'))]
        mDrawerToggle.onConfigurationChanged(newConfig);
		[/if]
    }
 
}
[/file]
		
[/template]



